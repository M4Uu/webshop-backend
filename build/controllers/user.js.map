{"version":3,"file":"user.js","sourceRoot":"","sources":["../../src/controllers/user.ts"],"names":[],"mappings":"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","sourcesContent":["import { JWTMiddlewareInitial, JWTMiddlewareRefresh, JWTParse } from \"../middleware/jws\";\r\nimport * as schema from \"../schema/user\"\r\nimport { Request, Response } from \"express\"\r\n\r\nexport class UserController {\r\n  private userModel: any;\r\n  constructor(userModel: any) {\r\n    this.userModel = userModel\r\n  }\r\n\r\n  logOut = async (_req: Request, res: Response) => {\r\n    res.clearCookie('access_token');\r\n    res.clearCookie('refresh_token');\r\n    res.status(200).json({\r\n      status: {\r\n        statusCode: 200,\r\n        message: 'Log out.'\r\n      }\r\n    });\r\n  }\r\n\r\n  protected = async (req: Request, res: Response) => {\r\n    const token = req.cookies['access_token']\r\n\r\n    if (!token) {\r\n      res.status(403).json({\r\n        status: {\r\n          statusCode: 403,\r\n          message: 'Access not authorized (Not Coockies)'\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    try {\r\n      res.status(200).json({\r\n        payload: JWTParse(token),\r\n        status: {\r\n          statusCode: 200,\r\n          message: 'Account current'\r\n        }\r\n      })\r\n    } catch {\r\n      res.clearCookie('access_token');\r\n      const ref_token = req.cookies['refresh_token']\r\n      if (!token) {\r\n        res.status(403).json({\r\n          status: {\r\n            statusCode: 403,\r\n            message: 'Access not authorized'\r\n          }\r\n        });\r\n        return;\r\n      }\r\n      try {\r\n        const user = JWTMiddlewareInitial(await this.userModel.refreshUser({ input: JWTParse(ref_token) }))\r\n        res.cookie('access_token',\r\n          user,\r\n          {\r\n            httpOnly: true, // ;a coockie solo se puede acceder en el servidor\r\n            // secure: true, //la coockie solo se puede acceder en https\r\n            secure: process.env['NODE_ENV'] === 'production', //la coockie solo se puede acceder en https\r\n            sameSite: 'none', // la coockie entre múltiples dominios (con 'strict' solo se puede acceder desde el mismo dominio)\r\n            maxAge: 1000 * 60 * 60 // tiempo de duración de la cookie\r\n          }\r\n        )\r\n        res.status(200).json({\r\n          payload: user,\r\n          status: {\r\n            statusCode: 200,\r\n            message: 'Account current'\r\n          }\r\n        })\r\n      } catch {\r\n        res.status(401).json({\r\n          status: {\r\n            statusCode: 401,\r\n            message: 'Account expired'\r\n          }\r\n        });\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  login = async (req: Request, res: Response) => {\r\n    const data = await this.userModel.getUser(req.body)\r\n    if (!data) {\r\n      res.status(401).json({\r\n        status: {\r\n          statusCode: 401,\r\n          message: 'Correo o contraseña inválidos'\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    const user = JWTMiddlewareInitial(data)\r\n    const ref_user = JWTMiddlewareRefresh(data.cedula)\r\n\r\n    try {\r\n      res.cookie('access_token',\r\n        user,\r\n        {\r\n          httpOnly: true, // ;a coockie solo se puede acceder en el servidor\r\n          secure: true, //la coockie solo se puede acceder en https\r\n          // secure: process.env['NODE_ENV'] === 'production', //la coockie solo se puede acceder en https\r\n          sameSite: 'none', // la coockie entre múltiples dominios (con 'none' solo se puede acceder desde el mismo dominio)\r\n          maxAge: 1000 * 60 * 60 // tiempo de duración de la cookie\r\n        }\r\n      )\r\n\r\n      res.cookie('refresh_token',\r\n        ref_user,\r\n        {\r\n          httpOnly: true,\r\n          secure: true,\r\n          // secure: process.env['NODE_ENV'] === 'production',\r\n          sameSite: 'none',\r\n          maxAge: 30 * 24 * 60 * 60 * 1000\r\n        }\r\n      )\r\n\r\n      res.status(200).json({\r\n        status: {\r\n          statusCode: 200,\r\n          message: 'Login Success'\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      res.status(500).json({\r\n        status: {\r\n          statusCode: 500,\r\n          message: 'Server_error'\r\n        }\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  register = async (req: Request, res: Response) => {\r\n    const result = schema.validateUser(req.body)\r\n    let user;\r\n    if (result.error) {\r\n      res.status(422).json({ error: JSON.parse(result.error?.message as string) })\r\n      return;\r\n    }\r\n    try {\r\n      user = await this.userModel.register(result.data);\r\n      user ?\r\n        res.status(201).json({\r\n          status: {\r\n            user: user,\r\n            statusCode: 201,\r\n            message: 'Usuario registrado correctamente'\r\n          }\r\n        })\r\n        : res.status(406).json({\r\n          status: {\r\n            statusCode: 406,\r\n            message: 'Error al registarar'\r\n          }\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n      res.status(500).json({\r\n        status: {\r\n          statusCode: 500,\r\n          message: 'Server error'\r\n        }\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  delete = async (_req: Request, res: Response) => {\r\n    res.status(201).json({\r\n      status: {\r\n        statusCode: 200,\r\n        message: 'Este endpoint aún no se ha hecho, pero al menos manda un mensaje.'\r\n      }\r\n    })\r\n  }\r\n\r\n  upload = async (req: Request, res: Response) => {\r\n    const result = schema.validatePartialUser(req.body)\r\n    if (result.error) {\r\n      res.status(400).json({ error: JSON.parse(result.error?.message as string) })\r\n      return;\r\n    }\r\n    await this.userModel.upload({ input: result.data });\r\n    res.status(201).json({\r\n      status: {\r\n        statusCode: 201,\r\n        message: 'Datos cambiados'\r\n      }\r\n    })\r\n    return;\r\n  }\r\n}"]}