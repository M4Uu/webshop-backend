{"version":3,"file":"cryptohash.js","sourceRoot":"","sources":["../../src/middleware/cryptohash.ts"],"names":[],"mappings":";;;AAAA,mCAAiD;AAEjD,MAAa,UAAU;IACrB,MAAM,CAAC,YAAY,CAAC,QAAgB;QAClC,MAAM,IAAI,GAAG,IAAA,oBAAW,EAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7C,MAAM,IAAI,GAAG,IAAA,mBAAU,EAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC5D,OAAO,GAAG,IAAI,IAAI,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,QAAgB,EAAE,MAAc;QACpD,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,IAAI,GAAG,IAAA,mBAAU,EAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC5D,OAAO,IAAI,KAAK,GAAG,CAAC;IACtB,CAAC;CACF;AAZD,gCAYC","sourcesContent":["import { scryptSync, randomBytes } from 'crypto';\r\n\r\nexport class hashCrypto {\r\n  static hashPassword(password: string) {\r\n    const salt = randomBytes(16).toString('hex');\r\n    const hash = scryptSync(password, salt, 64).toString('hex');\r\n    return `${salt}:${hash}`;\r\n  }\r\n\r\n  static verifyPassword(password: string, stored: string) {\r\n    const [salt, key] = stored.split(':');\r\n    const hash = scryptSync(password, salt, 64).toString('hex');\r\n    return hash === key;\r\n  }\r\n}"]}