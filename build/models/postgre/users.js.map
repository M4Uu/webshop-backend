{"version":3,"file":"users.js","sourceRoot":"","sources":["../../../src/models/postgre/users.ts"],"names":[],"mappings":"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","sourcesContent":["import { Pool } from 'pg';\r\nimport bcrypt from 'bcryptjs';\r\n\r\n\r\nexport const dbConfig = {\r\n  connectionString: process.env['DB_STRING'],\r\n  ssl: { rejectUnauthorized: false }\r\n};\r\n\r\nconst pool = new Pool(dbConfig);\r\n\r\nexport async function testConnection() {\r\n  try {\r\n    const client = await pool.connect();\r\n    console.log('Conexión exitosa a PostgreSQL');\r\n    client.release();\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error de conexión:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function comparePassword(password: string, storedHash: string): Promise<boolean> {\r\n  try {\r\n    const isMatch = await bcrypt.compare(password, storedHash);\r\n    return isMatch;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport class UserModel {\r\n\r\n  static disconnect(connection: any) {\r\n    connection.end(function (err: any) {\r\n      if (err) throw err;\r\n      console.log(\"Conexión cerrada\");\r\n    })\r\n  }\r\n\r\n\r\n  static async getUser(input: any) {\r\n    const client = await pool.connect();\r\n    try {\r\n      const query = `\r\n        SELECT cedula, credencial, nombres, nombre_usuario, localidad, correo, imagen_url\r\n        FROM \"wp_usuarios\"\r\n        WHERE correo = $1;\r\n      `;\r\n\r\n      const result = await client.query<any>(query, [input.correo])\r\n      const user = result.rows[0];\r\n      const validatePassword = await comparePassword(input.credencial, user.credencial);\r\n      if (validatePassword) {\r\n        delete user.credencial;\r\n        return user;\r\n      }\r\n      return null\r\n    } catch (error) {\r\n      console.error('Error en getUser:', error);\r\n      throw error;\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n\r\n  static async refreshUser(input: any) {\r\n    const client = await pool.connect();\r\n\r\n    try {\r\n      const query = `\r\n        SELECT cedula, nombres, nombre_usuario, localidad, correo, imagen_url\r\n        FROM users\r\n        WHERE cedula = $1;\r\n      `;\r\n\r\n      const result = await client.query<any>(query, [input.cedula]);\r\n\r\n      if (result.rows.length === 0) return null;\r\n      return result.rows[0];\r\n    } catch (error) {\r\n      console.error('Error en refreshUser:', error);\r\n      throw error;\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n\r\n  static async register(input: any) {\r\n    const SALT_ROUNDS = 5;\r\n    const client = await pool.connect();\r\n    try {\r\n      const verifyResult = await client.query('SELECT * FROM \"wp_usuarios\" WHERE cedula = $1', [input.cedula]);\r\n      if (verifyResult.rows.length > 0) { return null; }\r\n\r\n      const insertQuery = `\r\n        INSERT INTO \"wp_usuarios\" (cedula, nombres, nombre_usuario, credencial, localidad, correo, imagen_url)\r\n        VALUES ($1, $2, $3, $4, $5, $6, $7)\r\n        RETURNING cedula, nombres, nombre_usuario, correo;\r\n      `;\r\n\r\n      try {\r\n        const hashedPassword = await bcrypt.hash(input.credencial, SALT_ROUNDS);\r\n        const insertResult = await client.query<any>(insertQuery, [\r\n          input.cedula,\r\n          input.nombres,\r\n          input.nombre_usuario,\r\n          hashedPassword,\r\n          input.localidad,\r\n          input.correo,\r\n          input.imagen_url\r\n        ]);\r\n\r\n        return insertResult.rows[0];\r\n      } catch (hashError) {\r\n        console.error('Error hashing password:', hashError);\r\n        throw new Error('Password hashing failed');\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error en register:', error);\r\n      throw new Error('Error creating user');\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n\r\n  static async upload({ input }: {\r\n    input: {\r\n      user_id: string;\r\n      user_name: string;\r\n      email_address: string;\r\n      first_name: string;\r\n      last_name: string;\r\n      pswd: string;\r\n    }\r\n  }) {\r\n    const client = await pool.connect();\r\n\r\n    try {\r\n      const { user_id, user_name, email_address, first_name, last_name, pswd } = input;\r\n\r\n      const updateQuery = `\r\n        UPDATE users\r\n        SET user_name = $1,\r\n            email_address = $2,\r\n            first_name = $3,\r\n            last_name = $4,\r\n            pswd = $5\r\n        WHERE id::text = $6\r\n        RETURNING id::text, user_name, email_address, first_name, last_name, pswd, created_at;\r\n      `;\r\n\r\n      const updateResult = await client.query<any>(updateQuery, [\r\n        user_name,\r\n        email_address,\r\n        first_name,\r\n        last_name,\r\n        pswd,\r\n        user_id\r\n      ]);\r\n\r\n      if (updateResult.rows.length === 0) return null;\r\n      return updateResult.rows[0];\r\n    } catch (error) {\r\n      console.error('Error en upload:', error);\r\n      throw new Error('Error updating user');\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n\r\n  static async delete({ id }: { id: string }) {\r\n    const client = await pool.connect();\r\n\r\n    try {\r\n      const deleteQuery = 'DELETE FROM users WHERE id::text = $1 RETURNING id::text;';\r\n      const deleteResult = await client.query(deleteQuery, [id]);\r\n\r\n      if (deleteResult.rows.length === 0) return false;\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error en delete:', error);\r\n      throw new Error('Error deleting user');\r\n    } finally {\r\n      client.release();\r\n    }\r\n  }\r\n}\r\n"]}