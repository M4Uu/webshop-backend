{"version":3,"file":"users.js","sourceRoot":"","sources":["../../../src/models/mysql/users.ts"],"names":[],"mappings":"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","sourcesContent":["import mysql from 'mysql2/promise'\r\nimport { Uuid, Time, UserData } from '../../interface/users';\r\n\r\nconst LOCAL_CONFIG = {\r\n  host: 'Cruz-PC',\r\n  user: 'root',\r\n  port: 3306,\r\n  password: '',\r\n  database: 'users_db'\r\n}\r\n\r\nasync function connect(){\r\n  return await mysql.createConnection(LOCAL_CONFIG);\r\n}\r\n\r\nfunction disconnect(connection : any) {\r\n  connection.end(function(err : any) {\r\n    if(err) throw err;\r\n    console.log(\"Conexi√≥n cerrada\");\r\n  })\r\n}\r\n\r\nexport class UserModel {\r\n  // static async getAll() {\r\n  //   const [users, tableInfo] = awaitw connection.query(\r\n  //     'SELECT BIN_TO_UUID(user_id), user_name, email_address, first_name, last_name, pswd, created_ad FROM users;'\r\n  //   )\r\n  //   return users;\r\n  // }\r\n\r\n  static async getUser({ input } : any){\r\n    const connection = await connect()\r\n    const { email, password } = input\r\n    \r\n    const [user, _tableInfo]: [UserData[], mysql.FieldPacket[]] = await connection.query(\r\n      'SELECT BIN_TO_UUID(id) As id, user_name, email_address, first_name, last_name, pswd, created_ad FROM users WHERE ? = pswd AND ? = email_address;',\r\n      [password, email]\r\n    )\r\n    disconnect(connection)\r\n    if (user[0] === undefined) return null\r\n    return user[0];\r\n  }\r\n\r\n  static async refreshUser({ input } : any){\r\n    const connection = await connect()\r\n    const { id } = input\r\n    \r\n    const [user, _tableInfo]: [UserData[], mysql.FieldPacket[]] = await connection.query('SELECT BIN_TO_UUID(user_id) As user_id, user_name, email_address, first_name, last_name, pswd, created_ad FROM users WHERE ? = BIN_TO_UUID(user_id) ;',[id])\r\n    disconnect(connection)\r\n    if (user[0] === undefined) return null\r\n    return user[0];\r\n  }\r\n\r\n  static async register({ input } : any){\r\n    const connection = await connect()\r\n    const {\r\n      user_name,\r\n      email_address,\r\n      first_name,\r\n      last_name,\r\n      pswd\r\n    } = input\r\n    \r\n    const [uuidResult] : [Uuid[], mysql.FieldPacket[]] = await connection.query('SELECT UUID() AS uuid;')\r\n    const uuid = uuidResult[0].uuid\r\n\r\n    const [timeResult] : [Time[], mysql.FieldPacket[]] = await connection.query('SELECT NOW() time;')\r\n    const time = timeResult[0].time\r\n\r\n    const [VerifyUser]: [UserData[], mysql.FieldPacket[]] = await connection.query(\r\n      'SELECT * FROM users WHERE user_name = ?',\r\n      [user_name]\r\n    )\r\n\r\n    if(VerifyUser[0]){\r\n      disconnect(connection)\r\n      return null\r\n    }else{\r\n      try{\r\n        await connection.query(\r\n          'INSERT INTO users (id ,user_name, email_address, first_name, last_name, pswd, created_ad ) VALUES (UUID_TO_BIN(?), ?, ?, ?, ?, ?, ?);',\r\n          [uuid, user_name, email_address, first_name, last_name, pswd, time]\r\n        )\r\n      }\r\n      catch (err) {\r\n        throw new Error('Error creating user')\r\n      }\r\n  \r\n      const [newUser]: [UserData[], mysql.FieldPacket[]] = await connection.query(\r\n        'SELECT BIN_TO_UUID(id) id, user_name, email_address, first_name, last_name, pswd, created_ad FROM users WHERE id = UUID_TO_BIN(?)',\r\n        [uuid]\r\n      )\r\n      disconnect(connection)\r\n      return newUser[0]\r\n    }\r\n\r\n  }\r\n\r\n  // static async delete({ id } : any) {}\r\n  static async upload({ input } : any) {\r\n    const connection = await connect()\r\n    const {\r\n      user_id,\r\n      user_name,\r\n      email_address,\r\n      first_name,\r\n      last_name,\r\n      pswd\r\n    } = input\r\n    \r\n    try{\r\n      await connection.execute(\r\n        `UPDATE users\r\n          SET user_name = ?,\r\n              email_address = ?,\r\n              first_name = ?,\r\n              last_name = ?,\r\n              pswd = ?\r\n          WHERE id = UUID_TO_BIN(?);`,\r\n        [user_name, email_address, first_name, last_name, pswd, user_id])\r\n    } catch (err) {\r\n      throw new Error('Error change user')\r\n    }\r\n    const [changedUser] = await connection.query(\r\n      'SELECT BIN_TO_UUID(id) id, user_name, email_address, first_name, last_name, pswd, created_ad FROM users WHERE id = UUID_TO_BIN(?)',\r\n      [user_id]\r\n    )\r\n    disconnect(connection)\r\n    if(changedUser === undefined) return null\r\n    return changedUser\r\n  }\r\n}\r\n"]}